server:
  port: 8084

spring:
  application:
    name: order-service

  datasource:
    url: ${SPRING_DATASOURCE_URL:jdbc:postgresql://localhost:5433/ticketdb}
    username: ${SPRING_DATASOURCE_USERNAME:ticketuser}
    password: ${SPRING_DATASOURCE_PASSWORD:ticketpass}
    driver-class-name: org.postgresql.Driver

  jpa:
    open-in-view: false  # Disable OpenEntityManagerInViewFilter
    hibernate:
      ddl-auto: update
#      ddl-auto: create-drop
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
    defer-datasource-initialization: true
# redis
  data:
    redis:
      host: ${SPRING_REDIS_HOST:localhost}
      port: ${SPRING_REDIS_PORT:6380}

# Kafka
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    consumer:
      group-id: notification-service-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer


# Service
service:
  event:
    url: ${EVENT_SERVICE_URL:http://localhost:8082/api/v1/tickets}
  user:
    url: ${USER_SERVICE_URL:http://localhost:8081}
  payment:
    url: ${PAYMENT_SERVICE_URL:http://localhost:8085/api/v1/payments}

# Notification
notification:
  topic:
    order-confirmed: order-confirmed-topic
